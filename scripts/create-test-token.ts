import { Connection, Keypair, PublicKey } from '@solana/web3.js';
import { createMint, getOrCreateAssociatedTokenAccount, mintTo } from '@solana/spl-token';
import * as fs from 'fs';
import * as path from 'path';

/**
 * Script to create a test SPL token on Devnet for vault deposits/withdrawals
 * 
 * This will:
 * 1. Create a new SPL token mint
 * 2. Create a token account for the payer
 * 3. Mint initial supply to the payer
 * 4. Save the mint address to a config file
 */

async function main() {
  // Connect to Devnet
  const connection = new Connection('https://api.devnet.solana.com', 'confirmed');

  // Load the payer keypair (should be the same as your Anchor wallet)
  const payerKeypairPath = path.join(process.env.HOME || '', '.config/solana/id.json');
  
  if (!fs.existsSync(payerKeypairPath)) {
    console.error('‚ùå Keypair not found at:', payerKeypairPath);
    console.error('Please make sure you have a Solana keypair set up');
    process.exit(1);
  }

  const payerKeypairData = JSON.parse(fs.readFileSync(payerKeypairPath, 'utf-8'));
  const payer = Keypair.fromSecretKey(new Uint8Array(payerKeypairData));

  console.log('üîë Payer:', payer.publicKey.toBase58());

  // Check balance
  const balance = await connection.getBalance(payer.publicKey);
  console.log('üí∞ Balance:', balance / 1e9, 'SOL');

  if (balance < 0.1 * 1e9) {
    console.error('‚ùå Insufficient balance. Please airdrop some SOL:');
    console.error(`   solana airdrop 2 ${payer.publicKey.toBase58()} --url devnet`);
    process.exit(1);
  }

  console.log('\nüìù Creating test SPL token...');

  // Create mint
  const mint = await createMint(
    connection,
    payer,
    payer.publicKey, // mint authority
    payer.publicKey, // freeze authority
    6 // decimals (same as USDC)
  );

  console.log('‚úÖ Token Mint created:', mint.toBase58());

  // Create token account for payer
  const tokenAccount = await getOrCreateAssociatedTokenAccount(
    connection,
    payer,
    mint,
    payer.publicKey
  );

  console.log('‚úÖ Token Account created:', tokenAccount.address.toBase58());

  // Mint initial supply (1,000,000 tokens)
  const initialSupply = 1_000_000 * 10 ** 6; // 1M tokens with 6 decimals
  await mintTo(
    connection,
    payer,
    mint,
    tokenAccount.address,
    payer.publicKey,
    initialSupply
  );

  console.log('‚úÖ Minted 1,000,000 tokens to your account');

  // Save mint address to config
  const configPath = path.join(__dirname, '..', 'app', 'src', 'config', 'token.ts');
  const configContent = `// Auto-generated by scripts/create-test-token.ts
import { PublicKey } from '@solana/web3.js';

/**
 * Test SPL Token for Vault deposits/withdrawals on Devnet
 */
export const TEST_TOKEN_MINT = new PublicKey('${mint.toBase58()}');

export const TOKEN_CONFIG = {
  mint: TEST_TOKEN_MINT,
  decimals: 6,
  symbol: 'CHRONOS',
  name: 'CHRONOS Test Token',
} as const;
`;

  fs.writeFileSync(configPath, configContent);
  console.log('‚úÖ Config saved to:', configPath);

  console.log('\nüéâ Setup complete!');
  console.log('\nüìã Summary:');
  console.log('   Token Mint:', mint.toBase58());
  console.log('   Your Token Account:', tokenAccount.address.toBase58());
  console.log('   Initial Supply: 1,000,000 CHRONOS');
  console.log('\nüí° You can now use this token for vault deposits/withdrawals');
}

main().catch((err) => {
  console.error('‚ùå Error:', err);
  process.exit(1);
});

